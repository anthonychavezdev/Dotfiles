#+TITLE: Emacs config
#+AUTHOR: Anthony
#+LANGUAGE: en
#+OPTIONS: num:nil

* Quality of life
** Enable line numbers
Emacs breaks certain modes when it has line-numbers-mode enabled, (like docview or ansi-term) so I utilize the approach of only enabling it on some major modes rather than globally
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
#+END_SRC
** Show parent parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Disable the default startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Disable most gui elements
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Enable copypasting outside of Emacs
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
#+END_SRC
** Disable automatic creation of backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** Enable conservative scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Disable ring-bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default standard-indent 4)
  (setq c-basic-offset tab-width)
  (setq-default electric-indent-inhibit t)
  (setq-default indent-tabs-mode t)
  (setq backward-delete-char-untabify-method 'nil)
#+END_SRC
** Enable prettify symbols mode
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
** Enable bracket pair-matching
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+END_SRC
** Creating a new window switches your cursor to it
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
	(interactive)
	(split-window-below)
	(balance-windows)
	(other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
	(interactive)
	(split-window-right)
	(balance-windows)
	(other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Transform yes-or-no questions into y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Easier resize bindigs
Super - Control - <arrow>
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "s-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "s-C-<down>") 'shrink-window)
  (global-set-key (kbd "s-C-<up>") 'enlarge-window)
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

* Org-mode
** Description
One of the main selling points of Emacs! Org Mode!
** Code
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook
              '(lambda ()
                 (visual-line-mode 1)))
    (add-hook 'org-mode-hook 'org-bullets-mode)
    (add-hook 'org-mode-hook 'evil-org-mode))

  (use-package org-indent
    :diminish org-indent-mode)

  (use-package htmlize
    :ensure t)

(use-package org-bullets
  :ensure t
  :hook ('org-mode-hook . (lambda () org-bullets-mode))  
  :config
  (require 'org-bullets))
#+END_SRC

* Packages
** Initialize =async=
*** Description
Utilize asynchronous processes whenever possible
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package async
	:ensure t
	:init
	(dired-async-mode 1))
#+END_SRC
** Initialize =all-the-icons=
*** Description
Bring nice icons to emacs
*** Code
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t
  :config
    ;; (all-the-icons-install-fonts)

)
#+END_SRC
** Initialize =powerline=
*** Code
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :config
    (powerline-default-theme))
#+END_SRC
** Initialize =airline-themes=
*** Description
Themes for the bottom bar that are compatible with evil
*** Code
#+BEGIN_SRC emacs-lisp
(use-package airline-themes
  :ensure t
  :config
    (load-theme 'airline-jet t))
#+END_SRC
** Initialize =key-chord=
*** Description
Key-chord lets you bind commands to combinations of key-strokes.
Here a “key chord” means two keys pressed simultaneously,
or a single key quickly pressed twice. (*)
*** Code
#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :ensure t
  :config
    (key-chord-mode 1))
#+END_SRC
** Initialize =ivy=
*** Description
flexible, simple tools for minibuffer completion in Emacs
*** Code
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
 (setq enable-recursive-minibuffers t))
#+END_SRC
** Initialize =evil= mode
*** Description
Vim keybindings in Emacs. Please note that Witchmacs has NO other evil-mode compatibility packages because I like to KISS. This might change in the future
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :after (key-chord)
    :init
    (setq evil-want-integration t) ;; This is true by default
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))
;; EVIL keybinds
;; Exit insert mode by pressing j and then k quickly
(setq key-chord-two-keys-delay 0.5)
(key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
(setq key-chord-two-keys-delay 0.5)


  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC
** Initialize =evil-leader=
*** Description
Evil Leader provides the <leader> feature from Vim
that provides an easy way to bind keys under a
variable prefix key.
For an experienced Emacs User it is nothing more
than a convoluted key map,
but for an Evil user coming from Vim
it means an easier start.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :after (evil)
    :ensure t
    :config
    (global-evil-leader-mode t)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "s s" 'swiper
      "d w" 'delete-trailing-whitespace
      "f e" 'find-file
      "b" 'ivy-switch-buffer))
#+END_SRC
** Initialize =evil-surround=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :after (evil)
    :ensure t
    :config
  (global-evil-surround-mode 1))
#+END_SRC

** Initialize =evil-indent-textobject=
*** Code
#+BEGIN_SRC emacs-lisp
(use-package evil-indent-textobject
    :ensure t)
#+END_SRC

** Initialize =evil-quickscope=
*** Code
#+BEGIN_SRC emacs-lisp
(use-package evil-quickscope
  :ensure t
  :config
  (global-evil-quickscope-always-mode 1))
#+END_SRC
** Initialize =evil-org=
*** Description
Vim keybinds for org-mode
*** Code
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :hook ('org-mode-hook . (lambda () evil-org-mode))
  :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

** Initialize =diminish=
*** Description
Diminish hides minor modes to prevent cluttering your mode line
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC
** Initialize =page-break-lines=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :diminish (page-break-lines-mode visual-line-mode))
#+END_SRC
** Initialize =projectile=
*** Description
Projectile is a project interaction library for Emacs.
Its goal is to provide a nice set of features
operating on a project level without introducing
external dependencies (when feasible).
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package projectile
   :ensure t
   :after evil
   :config
     (projectile-mode +1)
     :bind
     (:map evil-normal-state-map
                ("<SPC> p" . projectile-command-map)))
#+END_SRC
** Initialize =treemacs=
*** Description
Neat side-bar file and project explorer
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         30)
      (treemacs-resize-icons 11)
	
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
      :ensure t)

    (use-package treemacs-icons-dired
      :after treemacs dired
      :ensure t
      :config (treemacs-icons-dired-mode))
#+END_SRC
** Initialize =dashboard=
*** Description
The frontend of Witchmacs; without this there'd be no Marisa in your Emacs startup screen
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
        (setq dashboard-set-heading-icons t)
        (setq dashboard-set-file-icons t)
        (setq dashboard-projects-backend 'projectile)
        (setq dashboard-items '((projects . 5)
                                (recents . 5)
                                (bookmarks . 5)
                                (agenda . 5)))
    (setq dashboard-banner-logo-title "E M A C S - The worst text editor!")
    (setq dashboard-startup-banner "~/.config/emacs/emacs-logo.png")
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-set-init-info t)
    (setq dashboard-init-info (format "%d packages loaded in %s"
                                      (length package-activated-list) (emacs-init-time)))
    (setq dashboard-set-footer t)
    (setq dashboard-set-navigator t))
#+END_SRC
*** Notes
If you pay close attention to the code in dashboard, you'll  notice that it uses custom functions defined under the :preface use-package block. I wrote all of those functions by looking at other people's Emacs distributions (Mainly [[https://github.com/seagle0128/.emacs.d][Centaur Emacs]]) and then experimenting and adapting them to Witchmacs. If you dig around, you'll find the same things I did - maybe even more!
** Initialize =swiper=
*** Description
When doing <SPC> s s to search, you get this very nice and neat mini-buffer that you can traverse with the arrow keys (or C-n and C-p) and then press <RET> to select where you want to go
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package swiper
	:ensure t
	:bind ("C-s" . 'swiper))
#+END_SRC

** Initialize =magit=
*** Description
Git porcelain for Emacs
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
** Initialize =smooth-scrolling=
*** Description
This package offers a minor mode which make emacs scroll smoothly. It
keeps the point away from the top and bottom of the current buffer's 
window in order to keep lines of context around the point visible as
much as possible, whilst minimising the frequency of sudden scroll
jumps which are visually confusing.
*** code
#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
 :ensure t
 :config
   (smooth-scrolling-mode 1))
#+END_SRC
** Built-in entry: =eldoc=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+END_SRC
** Built-in entry: =abbrev=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package abbrev
    :diminish abbrev-mode)
#+END_SRC
* Programming
** Initialize =elisp-bug-hunter=
*** Description
The Bug Hunter is an Emacs library that finds the source of an
error or unexpected behavior inside an elisp configuration file
(typically init.el or .emacs).
*** Code
#+BEGIN_SRC emacs-lisp
(use-package bug-hunter
  :ensure t)
#+END_SRC
